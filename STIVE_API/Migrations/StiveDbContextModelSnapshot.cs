// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STIVE_API.Data;

namespace STIVE_API.Migrations
{
    [DbContext(typeof(StiveDbContext))]
    partial class StiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Annee", b =>
                {
                    b.Property<Guid>("AnneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("AnneeId");

                    b.ToTable("Annee");

                    b.HasData(
                        new
                        {
                            AnneeId = new Guid("72c30a4b-0588-44f2-806e-3ec14d74474e"),
                            Number = 2010
                        },
                        new
                        {
                            AnneeId = new Guid("0aa23500-7964-43c4-b193-7cbe5c14aa3f"),
                            Number = 2011
                        },
                        new
                        {
                            AnneeId = new Guid("ea76c73f-2fbd-4283-9606-6980772ab98b"),
                            Number = 2012
                        },
                        new
                        {
                            AnneeId = new Guid("48b9fba2-19ea-4c8d-939b-1895b3f04185"),
                            Number = 2013
                        },
                        new
                        {
                            AnneeId = new Guid("2932e7e4-4a36-4f06-b162-18febd484c24"),
                            Number = 2014
                        },
                        new
                        {
                            AnneeId = new Guid("661391aa-9372-4b4d-b721-0df3339ec08d"),
                            Number = 2015
                        },
                        new
                        {
                            AnneeId = new Guid("a875f7b8-5ccb-47cc-a5fd-8972cecac76f"),
                            Number = 2016
                        },
                        new
                        {
                            AnneeId = new Guid("2c1c9a0d-5e8f-4902-88d0-5ceeeae44cd8"),
                            Number = 2017
                        },
                        new
                        {
                            AnneeId = new Guid("82f17568-6fc2-4ac4-8b28-ca94adb5f3da"),
                            Number = 2018
                        },
                        new
                        {
                            AnneeId = new Guid("e4ab022e-3e47-4772-857e-e57e0c7cef82"),
                            Number = 2019
                        },
                        new
                        {
                            AnneeId = new Guid("603b6d49-eee1-42b4-8d4f-108857455001"),
                            Number = 2020
                        },
                        new
                        {
                            AnneeId = new Guid("e278a57a-1631-4f77-bf98-da33cdb3a686"),
                            Number = 2021
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CepageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CepageId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2323568f-76e3-4c0d-92aa-c9cea8ec1ba8"),
                            AnneeId = new Guid("72c30a4b-0588-44f2-806e-3ec14d74474e"),
                            CapacityId = new Guid("a2c7026f-3a21-49fa-967d-8edd5414e4dc"),
                            CepageId = new Guid("7a2853ea-45ba-4fcd-abfe-27e5050b0742"),
                            Description = "Description à venir",
                            FamilyId = new Guid("9c22dfd6-914c-412b-9558-5a4ed819cbba"),
                            Name = "Bouteille de vin",
                            Ref = "152DER147DFM9",
                            SupplierId = new Guid("546d0d25-3328-46b7-9994-968e9af13e51"),
                            UnitPrice = 5.5999999999999996
                        },
                        new
                        {
                            Id = new Guid("e6078a4e-4cc2-42f5-9d1f-906dc2b5cb7b"),
                            AnneeId = new Guid("e278a57a-1631-4f77-bf98-da33cdb3a686"),
                            CapacityId = new Guid("5640bc96-9ec9-4e94-9227-2f11ca64ef4f"),
                            CepageId = new Guid("b3c5a2fc-10b4-46ea-8fa1-653e2620d8e2"),
                            Description = "Description à venir",
                            FamilyId = new Guid("69490ec8-c1be-4ed6-b321-1c676a196228"),
                            Name = "Bouteille de bordeau",
                            Ref = "452SER197DRP9",
                            SupplierId = new Guid("546d0d25-3328-46b7-9994-968e9af13e51"),
                            UnitPrice = 3.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Capacity", b =>
                {
                    b.Property<Guid>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BottleCapacity")
                        .HasColumnType("float");

                    b.HasKey("CapacityId");

                    b.ToTable("Capacity");

                    b.HasData(
                        new
                        {
                            CapacityId = new Guid("a2c7026f-3a21-49fa-967d-8edd5414e4dc"),
                            BottleCapacity = 75.0
                        },
                        new
                        {
                            CapacityId = new Guid("5640bc96-9ec9-4e94-9227-2f11ca64ef4f"),
                            BottleCapacity = 37.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Cepage", b =>
                {
                    b.Property<Guid>("CepageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CepageId");

                    b.ToTable("Cepage");

                    b.HasData(
                        new
                        {
                            CepageId = new Guid("7a2853ea-45ba-4fcd-abfe-27e5050b0742"),
                            Name = "Chardonnay",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("ff493a47-fe2c-4bfc-9853-9f8881dfba98"),
                            Name = "Sauvignon",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("f193a0fc-15ac-4d38-b277-3508760619cd"),
                            Name = "Pinot Noir",
                            Origin = "Allemagne"
                        },
                        new
                        {
                            CepageId = new Guid("0252051a-a00e-4934-873e-5d6aec75c4f8"),
                            Name = "Riesling",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("702039a9-5aa4-4558-9db8-fa5bc2302072"),
                            Name = "Gewurztraminer",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("573aa12d-7bc4-4e9e-80d2-a049e7357fd8"),
                            Name = "Merlot noir",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("b3c5a2fc-10b4-46ea-8fa1-653e2620d8e2"),
                            Name = "Mauzac rosé",
                            Origin = "France"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");

                    b.HasData(
                        new
                        {
                            FamilyId = new Guid("9c22dfd6-914c-412b-9558-5a4ed819cbba"),
                            Name = "Rosé"
                        },
                        new
                        {
                            FamilyId = new Guid("b62e4e57-1ca6-470e-af62-6af7883f7ef8"),
                            Name = "Vin blanc"
                        },
                        new
                        {
                            FamilyId = new Guid("a6c6aa54-7149-4e98-a517-9142b857487d"),
                            Name = "Vin rouge"
                        },
                        new
                        {
                            FamilyId = new Guid("f92b6bd4-8b86-4ec0-b56f-5ab691850f83"),
                            Name = "Muscat"
                        },
                        new
                        {
                            FamilyId = new Guid("8c36ffd8-9b4e-4df6-add6-3d96363638a8"),
                            Name = "Vin cuit"
                        },
                        new
                        {
                            FamilyId = new Guid("69490ec8-c1be-4ed6-b321-1c676a196228"),
                            Name = "Mousseux"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Provision")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.Property<Guid>("ArticleRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleRowId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClientOrderId");

                    b.ToTable("ArticleRow");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.Property<Guid>("ClientOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("ClientOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClientOrder");

                    b.HasData(
                        new
                        {
                            ClientOrderId = new Guid("54d5e537-e884-490d-9644-ce89dc91b79f"),
                            CustomerId = new Guid("808f43fe-edeb-46a8-9521-63143f72aaa4"),
                            Date = new DateTime(2022, 1, 3, 13, 10, 50, 124, DateTimeKind.Utc).AddTicks(8098),
                            HTPrice = 0.0,
                            Reference = "TEST123456",
                            StatusId = new Guid("9dbd3fe8-72ab-4874-8e13-36933ab4c743"),
                            TTCPrice = 0.0
                        },
                        new
                        {
                            ClientOrderId = new Guid("e88b0ea7-fbca-4b31-9f86-49ba2e4c3255"),
                            CustomerId = new Guid("f19ba76e-395e-476b-82ba-c6e6941ecff4"),
                            Date = new DateTime(2022, 1, 3, 13, 10, 50, 124, DateTimeKind.Utc).AddTicks(8821),
                            HTPrice = 0.0,
                            Reference = "TEST234567",
                            StatusId = new Guid("9dbd3fe8-72ab-4874-8e13-36933ab4c743"),
                            TTCPrice = 0.0
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurshaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("PurshaseOrderId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = new Guid("9dbd3fe8-72ab-4874-8e13-36933ab4c743"),
                            Name = "Vérification en cours"
                        },
                        new
                        {
                            StatusId = new Guid("bcc882c8-624c-487d-a1e6-8a6cdf174d04"),
                            Name = "Terminée"
                        },
                        new
                        {
                            StatusId = new Guid("259e8fe2-469d-4225-84d1-811790c7853a"),
                            Name = "Archivée"
                        },
                        new
                        {
                            StatusId = new Guid("ad74b3f6-c851-455b-870b-27b93eb53eb6"),
                            Name = "Livrée"
                        },
                        new
                        {
                            StatusId = new Guid("67e809d4-c85d-4a29-89db-d3bdbc38feab"),
                            Name = "En cours d'approvisionnement"
                        },
                        new
                        {
                            StatusId = new Guid("f8db0f33-602e-4e34-ae47-cccb8304e4e7"),
                            Name = "En cours de traitement"
                        },
                        new
                        {
                            StatusId = new Guid("30395bda-0fc0-47e8-b0c6-1c7aec6e25f5"),
                            Name = "En préparation"
                        },
                        new
                        {
                            StatusId = new Guid("c0ee4508-8519-4cfb-b3c2-68d82030fb8f"),
                            Name = "En cours d'acheminement"
                        },
                        new
                        {
                            StatusId = new Guid("f93d3524-31e1-4ccd-912d-05fb56255ae7"),
                            Name = "j'ai volé votre bouteille, merci, bisous, de Greg."
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("546d0d25-3328-46b7-9994-968e9af13e51"),
                            Adress = "14 Rue Louis Ruquier",
                            City = "Sotteville-lès-Rouen",
                            Cp = "76300",
                            Name = "La Centrale des Vins",
                            PhoneNumber = "02 35 73 03 93",
                            Siret = "38862771300067"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("808f43fe-edeb-46a8-9521-63143f72aaa4"),
                            Address = "1 chemin des alisiers 67700 Saverne",
                            City = "Saverne",
                            Cp = "67700",
                            CustomerReference = "RJEL5WGMXNN2",
                            Email = "luciole.trp@gmail.com",
                            FirstName = "Lucile",
                            LastName = "TRIPIER",
                            Password = "123",
                            PhoneNumber = "0699318613"
                        },
                        new
                        {
                            Id = new Guid("f19ba76e-395e-476b-82ba-c6e6941ecff4"),
                            Address = "123 rue des chats",
                            City = "CroquetteLand",
                            Cp = "000009",
                            CustomerReference = "CCAYOVJ15ETD",
                            Email = "gregory.lbl@gmail.com",
                            FirstName = "Gregory",
                            LastName = "LEBLOND",
                            Password = "123",
                            PhoneNumber = "0631258641"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f727433-e803-421b-8157-08797253fe23"),
                            Address = "3 Grande rue",
                            City = "Rouen",
                            Cp = "76000",
                            Email = "mariam.el@gmail.com",
                            EmployeNumber = "1K6VTBC4C6",
                            FirstName = "Mariam",
                            LastName = "EL-ALLALI",
                            Password = "123",
                            PhoneNumber = "0698574123"
                        },
                        new
                        {
                            Id = new Guid("d7379fee-70b4-456e-b061-cfdc87339ac7"),
                            Address = "57 Boulevard Gambetta",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francois.dupont@yahoo.com",
                            EmployeNumber = "JKFSBQD5KS",
                            FirstName = "François",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0635241896"
                        },
                        new
                        {
                            Id = new Guid("1ec323f1-eb80-4dd4-9bc9-7957a065eb41"),
                            Address = "21 Rue Victor Hugo",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francine.dupont@gmail.com",
                            EmployeNumber = "1461KGJLGK",
                            FirstName = "Francine",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0632547896"
                        },
                        new
                        {
                            Id = new Guid("f1fe7f00-3e32-4d25-a783-dd63eea9e949"),
                            Address = "3 Rue du Bout au Roussel",
                            City = "Champenard",
                            Cp = "27600",
                            Email = "jeremy.petit@outlook.com",
                            EmployeNumber = "10G6S9PV4K",
                            FirstName = "Jeremy",
                            LastName = "PETIT",
                            Password = "123",
                            PhoneNumber = "0652341254"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Annee", "Annee")
                        .WithMany()
                        .HasForeignKey("AnneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("STIVE_API.Data.Models.Articles.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Cepage", "Cepage")
                        .WithMany()
                        .HasForeignKey("CepageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Annee");

                    b.Navigation("Capacity");

                    b.Navigation("Cepage");

                    b.Navigation("Family");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.ClientOrder", "ClientOrder")
                        .WithMany()
                        .HasForeignKey("ClientOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ClientOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Article");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
