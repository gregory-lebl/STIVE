// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STIVE_API.Data;

namespace STIVE_API.Migrations
{
    [DbContext(typeof(StiveDbContext))]
    partial class StiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Annee", b =>
                {
                    b.Property<Guid>("AnneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("AnneeId");

                    b.ToTable("Annee");

                    b.HasData(
                        new
                        {
                            AnneeId = new Guid("c1a6c3bb-ac27-4813-884a-2fc42598e55f"),
                            Number = 2010
                        },
                        new
                        {
                            AnneeId = new Guid("52378546-5246-45c4-8269-6d2fc300880f"),
                            Number = 2011
                        },
                        new
                        {
                            AnneeId = new Guid("c1f6cf58-5933-4bcf-82aa-9bc396d093d2"),
                            Number = 2012
                        },
                        new
                        {
                            AnneeId = new Guid("e9f181db-2ca6-4ec6-9b5f-75d445c508a6"),
                            Number = 2013
                        },
                        new
                        {
                            AnneeId = new Guid("b9a7c085-42aa-41ee-b352-1b51b3cd73aa"),
                            Number = 2014
                        },
                        new
                        {
                            AnneeId = new Guid("c82d2d0a-a93f-450a-9bf8-bc8481f14d4a"),
                            Number = 2015
                        },
                        new
                        {
                            AnneeId = new Guid("084f36fe-f9cb-41f8-8331-dc91c5de3629"),
                            Number = 2016
                        },
                        new
                        {
                            AnneeId = new Guid("ed2019f7-91dd-4c8c-a18e-8a80eeac278c"),
                            Number = 2017
                        },
                        new
                        {
                            AnneeId = new Guid("9db19ed3-ef3e-41f9-aad4-8935e522f5cc"),
                            Number = 2018
                        },
                        new
                        {
                            AnneeId = new Guid("a9761754-bb5b-41f6-91dc-ef9113955d11"),
                            Number = 2019
                        },
                        new
                        {
                            AnneeId = new Guid("6ffa1956-80ea-455d-8ef7-9a148cd63a03"),
                            Number = 2020
                        },
                        new
                        {
                            AnneeId = new Guid("b3e362eb-5f91-4cae-a2bd-66c88b210838"),
                            Number = 2021
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CepageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CepageId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("StockId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b23fb87c-58d7-4cdd-a005-6ca61ab3bf9e"),
                            AnneeId = new Guid("c1a6c3bb-ac27-4813-884a-2fc42598e55f"),
                            CapacityId = new Guid("930b60dc-1bd8-408c-a2f0-05db84cce46f"),
                            CepageId = new Guid("0238c22a-ba09-42a9-be9f-9a16ffb401c4"),
                            Description = "Description à venir",
                            FamilyId = new Guid("6ea98eed-de1e-41d5-8365-648c55e94f18"),
                            Name = "Bouteille de vin",
                            Ref = "152DER147DFM9",
                            StockId = new Guid("79c64d52-5413-427f-82d3-0d3a274bf394"),
                            SupplierId = new Guid("a78e8a26-7ffb-4f8b-adbb-cf9e8e1596fd"),
                            UnitPrice = 5.5999999999999996
                        },
                        new
                        {
                            Id = new Guid("7019cfca-d792-4937-9b77-0ce6ca222560"),
                            AnneeId = new Guid("b3e362eb-5f91-4cae-a2bd-66c88b210838"),
                            CapacityId = new Guid("ea5293b2-42ab-49e1-aaa7-c08b5c7e279b"),
                            CepageId = new Guid("309c0610-497a-475c-a077-dcfc5dccab24"),
                            Description = "Description à venir",
                            FamilyId = new Guid("8221f2b1-ea4b-49a1-a79b-dfa8cf56562f"),
                            Name = "Bouteille de bordeau",
                            Ref = "452SER197DRP9",
                            StockId = new Guid("f8c0c856-081b-4920-ade9-348e4a81ce5c"),
                            SupplierId = new Guid("a78e8a26-7ffb-4f8b-adbb-cf9e8e1596fd"),
                            UnitPrice = 3.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Capacity", b =>
                {
                    b.Property<Guid>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BottleCapacity")
                        .HasColumnType("float");

                    b.HasKey("CapacityId");

                    b.ToTable("Capacity");

                    b.HasData(
                        new
                        {
                            CapacityId = new Guid("930b60dc-1bd8-408c-a2f0-05db84cce46f"),
                            BottleCapacity = 75.0
                        },
                        new
                        {
                            CapacityId = new Guid("ea5293b2-42ab-49e1-aaa7-c08b5c7e279b"),
                            BottleCapacity = 37.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Cepage", b =>
                {
                    b.Property<Guid>("CepageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CepageId");

                    b.ToTable("Cepage");

                    b.HasData(
                        new
                        {
                            CepageId = new Guid("0238c22a-ba09-42a9-be9f-9a16ffb401c4"),
                            Name = "Chardonnay",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("dcd8ea04-642c-4106-9dda-a8ebb563f474"),
                            Name = "Sauvignon",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("57be4b1e-93d4-4c0d-829c-f7c677d532ac"),
                            Name = "Pinot Noir",
                            Origin = "Allemagne"
                        },
                        new
                        {
                            CepageId = new Guid("dcb281d5-fea8-417e-ad0f-884b8037a50f"),
                            Name = "Riesling",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("02c61c60-6881-49de-aa56-159f40f0903b"),
                            Name = "Gewurztraminer",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("ca68f062-e8fc-4890-9d00-2f4d463d8309"),
                            Name = "Merlot noir",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("309c0610-497a-475c-a077-dcfc5dccab24"),
                            Name = "Mauzac rosé",
                            Origin = "France"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");

                    b.HasData(
                        new
                        {
                            FamilyId = new Guid("6ea98eed-de1e-41d5-8365-648c55e94f18"),
                            Name = "Rosé"
                        },
                        new
                        {
                            FamilyId = new Guid("55c05e1e-b858-47d8-8fca-f0dee30365e6"),
                            Name = "Vin blanc"
                        },
                        new
                        {
                            FamilyId = new Guid("869572a3-97ed-4052-a5da-2d104cec0e00"),
                            Name = "Vin rouge"
                        },
                        new
                        {
                            FamilyId = new Guid("34c93c2f-5aa5-4513-8e27-3ad9e3ffa5f3"),
                            Name = "Muscat"
                        },
                        new
                        {
                            FamilyId = new Guid("561adae5-d99d-4fee-8091-9ce52f8adabd"),
                            Name = "Vin cuit"
                        },
                        new
                        {
                            FamilyId = new Guid("8221f2b1-ea4b-49a1-a79b-dfa8cf56562f"),
                            Name = "Mousseux"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Provision")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.ToTable("Stock");

                    b.HasData(
                        new
                        {
                            StockId = new Guid("79c64d52-5413-427f-82d3-0d3a274bf394"),
                            Limit = 5,
                            Provision = 15,
                            Quantity = 10
                        },
                        new
                        {
                            StockId = new Guid("45821a59-b724-40f4-a25d-a3238b2ddc66"),
                            Limit = 1,
                            Provision = 5,
                            Quantity = 2
                        },
                        new
                        {
                            StockId = new Guid("f8c0c856-081b-4920-ade9-348e4a81ce5c"),
                            Limit = 20,
                            Provision = 100,
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.Property<Guid>("ArticleRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleRowId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClientOrderId");

                    b.ToTable("ArticleRow");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.Property<Guid>("ClientOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("ClientOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClientOrder");

                    b.HasData(
                        new
                        {
                            ClientOrderId = new Guid("4bcb4d67-f8ba-43a4-ba0e-bb94bd673246"),
                            CustomerId = new Guid("8d0e7981-0abf-4a68-9960-a4ee1a9eab0d"),
                            Date = new DateTime(2022, 1, 4, 11, 8, 10, 827, DateTimeKind.Utc).AddTicks(2125),
                            HTPrice = 0.0,
                            Reference = "TEST123456",
                            StatusId = new Guid("aa76db49-4fbd-4c59-96b1-56051b3b6311"),
                            TTCPrice = 0.0
                        },
                        new
                        {
                            ClientOrderId = new Guid("52ef1b6d-ea90-4959-b76b-fa4bb1a017e3"),
                            CustomerId = new Guid("dcb58c9f-2d91-45c5-8662-22c6bc0fc7a5"),
                            Date = new DateTime(2022, 1, 4, 11, 8, 10, 827, DateTimeKind.Utc).AddTicks(2436),
                            HTPrice = 0.0,
                            Reference = "TEST234567",
                            StatusId = new Guid("aa76db49-4fbd-4c59-96b1-56051b3b6311"),
                            TTCPrice = 0.0
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurshaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("PurshaseOrderId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = new Guid("aa76db49-4fbd-4c59-96b1-56051b3b6311"),
                            Name = "Vérification en cours"
                        },
                        new
                        {
                            StatusId = new Guid("cc980872-fcd9-44da-9063-b794492dec76"),
                            Name = "Terminée"
                        },
                        new
                        {
                            StatusId = new Guid("69068c14-1938-448d-a644-f92e96bd3494"),
                            Name = "Archivée"
                        },
                        new
                        {
                            StatusId = new Guid("38bea2dc-87d2-40d5-8f9e-a85f5ea9f7e7"),
                            Name = "Livrée"
                        },
                        new
                        {
                            StatusId = new Guid("9ff36dbc-2528-44cd-a296-2a19cdc2431c"),
                            Name = "En cours d'approvisionnement"
                        },
                        new
                        {
                            StatusId = new Guid("9bf51dcc-c6e7-48ca-ba79-b3ea1265b3ca"),
                            Name = "En cours de traitement"
                        },
                        new
                        {
                            StatusId = new Guid("f7254d9d-3bf3-42ea-a2b4-b5daeb7071ca"),
                            Name = "En préparation"
                        },
                        new
                        {
                            StatusId = new Guid("7dcf3b2e-532d-4c9e-9ca2-f999f28b1a60"),
                            Name = "En cours d'acheminement"
                        },
                        new
                        {
                            StatusId = new Guid("96c620bb-11e9-46fc-a012-d778c8b887fc"),
                            Name = "j'ai volé votre bouteille, merci, bisous, de Greg."
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("a78e8a26-7ffb-4f8b-adbb-cf9e8e1596fd"),
                            Address = "14 Rue Louis Ruquier",
                            City = "Sotteville-lès-Rouen",
                            Cp = "76300",
                            Name = "La Centrale des Vins",
                            PhoneNumber = "02 35 73 03 93",
                            Siret = "38862771300067"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d0e7981-0abf-4a68-9960-a4ee1a9eab0d"),
                            Address = "1 chemin des alisiers 67700 Saverne",
                            City = "Saverne",
                            Cp = "67700",
                            CustomerReference = "8LSMA21JCF2V",
                            Email = "luciole.trp@gmail.com",
                            FirstName = "Lucile",
                            LastName = "TRIPIER",
                            Password = "123",
                            PhoneNumber = "0699318613"
                        },
                        new
                        {
                            Id = new Guid("dcb58c9f-2d91-45c5-8662-22c6bc0fc7a5"),
                            Address = "123 rue des chats",
                            City = "CroquetteLand",
                            Cp = "000009",
                            CustomerReference = "D4MU6W3VTB9N",
                            Email = "gregory.lbl@gmail.com",
                            FirstName = "Gregory",
                            LastName = "LEBLOND",
                            Password = "123",
                            PhoneNumber = "0631258641"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e1666a1-1d9d-44f1-b2da-c37e2de90868"),
                            Address = "3 Grande rue",
                            City = "Rouen",
                            Cp = "76000",
                            Email = "mariam.el@gmail.com",
                            EmployeNumber = "B4GBFWYR3J",
                            FirstName = "Mariam",
                            LastName = "EL-ALLALI",
                            Password = "123",
                            PhoneNumber = "0698574123"
                        },
                        new
                        {
                            Id = new Guid("d25e3f5b-e73b-416b-a69c-34ea9231c942"),
                            Address = "57 Boulevard Gambetta",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francois.dupont@yahoo.com",
                            EmployeNumber = "LG5XTGCC3L",
                            FirstName = "François",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0635241896"
                        },
                        new
                        {
                            Id = new Guid("3d4d2b16-b68d-4e74-ba96-3b84ec9e802e"),
                            Address = "21 Rue Victor Hugo",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francine.dupont@gmail.com",
                            EmployeNumber = "6MIKFQND5V",
                            FirstName = "Francine",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0632547896"
                        },
                        new
                        {
                            Id = new Guid("a4a8d744-845d-402c-b9f0-fc5d5905abfe"),
                            Address = "3 Rue du Bout au Roussel",
                            City = "Champenard",
                            Cp = "27600",
                            Email = "jeremy.petit@outlook.com",
                            EmployeNumber = "619W24GYTQ",
                            FirstName = "Jeremy",
                            LastName = "PETIT",
                            Password = "123",
                            PhoneNumber = "0652341254"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Annee", "Annee")
                        .WithMany()
                        .HasForeignKey("AnneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("STIVE_API.Data.Models.Articles.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Cepage", "Cepage")
                        .WithMany()
                        .HasForeignKey("CepageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Annee");

                    b.Navigation("Capacity");

                    b.Navigation("Cepage");

                    b.Navigation("Family");

                    b.Navigation("Stock");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.ClientOrder", "ClientOrder")
                        .WithMany()
                        .HasForeignKey("ClientOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ClientOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Article");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
