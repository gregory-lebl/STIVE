// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STIVE_API.Data;

namespace STIVE_API.Migrations
{
    [DbContext(typeof(StiveDbContext))]
    [Migration("20220103100103_NullAllowedOnArticleFK")]
    partial class NullAllowedOnArticleFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Annee", b =>
                {
                    b.Property<Guid>("AnneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("AnneeId");

                    b.ToTable("Annee");

                    b.HasData(
                        new
                        {
                            AnneeId = new Guid("0e31b9d5-0f6f-4e31-8f35-3137631cf874"),
                            Number = 2010
                        },
                        new
                        {
                            AnneeId = new Guid("36a79427-e5ee-43d7-861c-47a1299b2b8a"),
                            Number = 2011
                        },
                        new
                        {
                            AnneeId = new Guid("7f851983-c435-4381-bc36-5f7df23d22a2"),
                            Number = 2012
                        },
                        new
                        {
                            AnneeId = new Guid("58d9e42a-58a5-4a5f-bc10-eaf1ab78dc59"),
                            Number = 2013
                        },
                        new
                        {
                            AnneeId = new Guid("e5e0a374-0014-4afd-a345-3f8e05291750"),
                            Number = 2014
                        },
                        new
                        {
                            AnneeId = new Guid("cfec00e9-c202-47a6-bac1-df7960d31668"),
                            Number = 2015
                        },
                        new
                        {
                            AnneeId = new Guid("1ade3c52-af16-4eb9-bec8-f7d194700ad1"),
                            Number = 2016
                        },
                        new
                        {
                            AnneeId = new Guid("53dbadff-3f8b-4473-9dac-e964ce1b1c40"),
                            Number = 2017
                        },
                        new
                        {
                            AnneeId = new Guid("1ebf5007-c499-412e-85c3-9bd13cd5cad5"),
                            Number = 2018
                        },
                        new
                        {
                            AnneeId = new Guid("82e39525-04ba-44e9-938e-1f420cdf9932"),
                            Number = 2019
                        },
                        new
                        {
                            AnneeId = new Guid("2018865b-2431-433a-9f61-2d78a91c15d7"),
                            Number = 2020
                        },
                        new
                        {
                            AnneeId = new Guid("531c468e-a902-4f91-9f8a-690ebe982bb7"),
                            Number = 2021
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CepageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CepageId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e839b50-2416-4f2d-8884-93c890fa73f2"),
                            AnneeId = new Guid("0e31b9d5-0f6f-4e31-8f35-3137631cf874"),
                            CapacityId = new Guid("228982d7-54f4-49e8-b51e-f1a24708a516"),
                            CepageId = new Guid("b6dae65e-5d42-4fc5-9002-4e9a1d02dd4e"),
                            Description = "Description à venir",
                            FamilyId = new Guid("169ce541-e98b-4636-9bc4-872e9fef2287"),
                            Name = "Bouteille de vin",
                            Ref = "152DER147DFM9",
                            SupplierId = new Guid("c83f33f3-c384-4da4-bc1b-99fded268020"),
                            UnitPrice = 5.5999999999999996
                        },
                        new
                        {
                            Id = new Guid("10e7fc36-ea7f-4140-b968-9a34986dbe0a"),
                            AnneeId = new Guid("531c468e-a902-4f91-9f8a-690ebe982bb7"),
                            CapacityId = new Guid("d335ab3f-060f-4546-b99b-4c160d3d1605"),
                            CepageId = new Guid("866b6e9c-7516-484e-a3bb-5efbe267bcb7"),
                            Description = "Description à venir",
                            FamilyId = new Guid("92ace882-49d0-4c3a-85a8-3d97e92741f0"),
                            Name = "Bouteille de bordeau",
                            Ref = "452SER197DRP9",
                            SupplierId = new Guid("c83f33f3-c384-4da4-bc1b-99fded268020"),
                            UnitPrice = 3.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Capacity", b =>
                {
                    b.Property<Guid>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BottleCapacity")
                        .HasColumnType("float");

                    b.HasKey("CapacityId");

                    b.ToTable("Capacity");

                    b.HasData(
                        new
                        {
                            CapacityId = new Guid("228982d7-54f4-49e8-b51e-f1a24708a516"),
                            BottleCapacity = 75.0
                        },
                        new
                        {
                            CapacityId = new Guid("d335ab3f-060f-4546-b99b-4c160d3d1605"),
                            BottleCapacity = 37.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Cepage", b =>
                {
                    b.Property<Guid>("CepageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CepageId");

                    b.ToTable("Cepage");

                    b.HasData(
                        new
                        {
                            CepageId = new Guid("b6dae65e-5d42-4fc5-9002-4e9a1d02dd4e"),
                            Name = "Chardonnay",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("b28535a7-e148-4936-9fc4-6983c1d68d1a"),
                            Name = "Sauvignon",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("1cde1913-dc30-45db-b890-0439e79a5a7d"),
                            Name = "Pinot Noir",
                            Origin = "Allemagne"
                        },
                        new
                        {
                            CepageId = new Guid("8f5cbf93-a3dd-4962-95c3-fdd1aef92f08"),
                            Name = "Riesling",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("f3fde950-1278-46d1-a528-c7ac40050f18"),
                            Name = "Gewurztraminer",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("4e8c6f7a-8bc9-44e5-bbaf-31522b97bbcf"),
                            Name = "Merlot noir",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("866b6e9c-7516-484e-a3bb-5efbe267bcb7"),
                            Name = "Mauzac rosé",
                            Origin = "France"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");

                    b.HasData(
                        new
                        {
                            FamilyId = new Guid("169ce541-e98b-4636-9bc4-872e9fef2287"),
                            Name = "Rosé"
                        },
                        new
                        {
                            FamilyId = new Guid("eacbadce-24b3-4dfd-bfe4-6d1114a0fca7"),
                            Name = "Vin blanc"
                        },
                        new
                        {
                            FamilyId = new Guid("84f153bf-55b6-416e-999c-9f4b953946c5"),
                            Name = "Vin rouge"
                        },
                        new
                        {
                            FamilyId = new Guid("33795b31-db6e-4b6a-9551-14e246c4f50c"),
                            Name = "Muscat"
                        },
                        new
                        {
                            FamilyId = new Guid("719902d7-1266-457b-ba18-63a0d7bf0b77"),
                            Name = "Vin cuit"
                        },
                        new
                        {
                            FamilyId = new Guid("92ace882-49d0-4c3a-85a8-3d97e92741f0"),
                            Name = "Mousseux"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Provision")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.Property<Guid>("ArticleRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleRowId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClientOrderId");

                    b.ToTable("ArticleRow");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.Property<Guid>("ClientOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("ClientOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClientOrder");

                    b.HasData(
                        new
                        {
                            ClientOrderId = new Guid("7e2e3c62-d479-4ad0-88dd-108ada5c6279"),
                            CustomerId = new Guid("2c9018ec-7dbf-4fb4-9bfb-c08ea2612e89"),
                            Date = new DateTime(2022, 1, 3, 10, 1, 2, 582, DateTimeKind.Utc).AddTicks(1203),
                            HTPrice = 0.0,
                            Reference = "TEST123456",
                            StatusId = new Guid("1fac6542-3b52-4c80-abcf-7abcc25f7954"),
                            TTCPrice = 0.0
                        },
                        new
                        {
                            ClientOrderId = new Guid("12adcaa7-1b5a-41c2-9f30-4439a191488d"),
                            CustomerId = new Guid("beb8d433-e602-42e9-bf66-dc9c504dc089"),
                            Date = new DateTime(2022, 1, 3, 10, 1, 2, 582, DateTimeKind.Utc).AddTicks(1513),
                            HTPrice = 0.0,
                            Reference = "TEST234567",
                            StatusId = new Guid("1fac6542-3b52-4c80-abcf-7abcc25f7954"),
                            TTCPrice = 0.0
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurshaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("PurshaseOrderId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = new Guid("1fac6542-3b52-4c80-abcf-7abcc25f7954"),
                            Name = "Vérification en cours"
                        },
                        new
                        {
                            StatusId = new Guid("9397ecd4-7ba4-4e87-82ea-4c8d24f81457"),
                            Name = "Terminée"
                        },
                        new
                        {
                            StatusId = new Guid("4d50847d-ee93-4586-9210-160c0aa9991f"),
                            Name = "Archivée"
                        },
                        new
                        {
                            StatusId = new Guid("ea202294-faf7-49ae-9b00-35f33ed1b126"),
                            Name = "Livrée"
                        },
                        new
                        {
                            StatusId = new Guid("68a119b4-e2a9-4b22-99cc-249b7f1c2e44"),
                            Name = "En cours d'approvisionnement"
                        },
                        new
                        {
                            StatusId = new Guid("053080a9-23a2-4ab7-add3-218ba8162242"),
                            Name = "En cours de traitement"
                        },
                        new
                        {
                            StatusId = new Guid("53f54a4e-f93f-4595-88e1-95e400a441a7"),
                            Name = "En préparation"
                        },
                        new
                        {
                            StatusId = new Guid("5c6652b2-1984-4de1-933f-9817738e316c"),
                            Name = "En cours d'acheminement"
                        },
                        new
                        {
                            StatusId = new Guid("c78979e9-926b-4002-aab5-049ff6f24cf6"),
                            Name = "j'ai volé votre bouteille, merci, bisous, de Greg."
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("c83f33f3-c384-4da4-bc1b-99fded268020"),
                            Adress = "14 Rue Louis Ruquier",
                            City = "Sotteville-lès-Rouen",
                            Cp = "76300",
                            Name = "La Centrale des Vins",
                            PhoneNumber = "02 35 73 03 93",
                            Siret = "38862771300067"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c9018ec-7dbf-4fb4-9bfb-c08ea2612e89"),
                            Adress = "1 chemin des alisiers 67700 Saverne",
                            City = "Saverne",
                            Cp = "67700",
                            CustomerReference = "7Q97H17CH27Y",
                            Email = "luciole.trp@gmail.com",
                            FirstName = "Lucile",
                            LastName = "TRIPIER",
                            Password = "123",
                            PhoneNumber = "0699318613"
                        },
                        new
                        {
                            Id = new Guid("beb8d433-e602-42e9-bf66-dc9c504dc089"),
                            Adress = "123 rue des chats",
                            City = "CroquetteLand",
                            Cp = "000009",
                            CustomerReference = "J3M29Z8QEVPN",
                            Email = "gregory.lbl@gmail.com",
                            FirstName = "Gregory",
                            LastName = "LEBLOND",
                            Password = "123",
                            PhoneNumber = "0631258641"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd7887ae-3047-4ffd-bb4a-bc300fbec03c"),
                            Adress = "3 Grande rue",
                            City = "Rouen",
                            Cp = "76000",
                            Email = "mariam.el@gmail.com",
                            EmployeNumber = "XWG57ZBRYT",
                            FirstName = "Mariam",
                            LastName = "EL-ALLALI",
                            Password = "123",
                            PhoneNumber = "0698574123"
                        },
                        new
                        {
                            Id = new Guid("9c21b765-6eae-4e23-ae55-ed73a6121bbe"),
                            Adress = "57 Boulevard Gambetta",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francois.dupont@yahoo.com",
                            EmployeNumber = "5OOU5DNQ3H",
                            FirstName = "François",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0635241896"
                        },
                        new
                        {
                            Id = new Guid("ef8d008c-b7ca-473c-b63f-0f8b06436813"),
                            Adress = "21 Rue Victor Hugo",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francine.dupont@gmail.com",
                            EmployeNumber = "EPKWMZ9PBX",
                            FirstName = "Francine",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0632547896"
                        },
                        new
                        {
                            Id = new Guid("38adb6c6-9a77-4caf-8cca-4be88cec0a75"),
                            Adress = "3 Rue du Bout au Roussel",
                            City = "Champenard",
                            Cp = "27600",
                            Email = "jeremy.petit@outlook.com",
                            EmployeNumber = "4IQEFEG52Z",
                            FirstName = "Jeremy",
                            LastName = "PETIT",
                            Password = "123",
                            PhoneNumber = "0652341254"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Annee", "Annee")
                        .WithMany()
                        .HasForeignKey("AnneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("STIVE_API.Data.Models.Articles.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Cepage", "Cepage")
                        .WithMany()
                        .HasForeignKey("CepageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Annee");

                    b.Navigation("Capacity");

                    b.Navigation("Cepage");

                    b.Navigation("Family");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.ClientOrder", "ClientOrder")
                        .WithMany()
                        .HasForeignKey("ClientOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ClientOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Article");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
