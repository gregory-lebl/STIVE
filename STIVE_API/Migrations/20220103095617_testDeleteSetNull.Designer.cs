// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STIVE_API.Data;

namespace STIVE_API.Migrations
{
    [DbContext(typeof(StiveDbContext))]
    [Migration("20220103095617_testDeleteSetNull")]
    partial class testDeleteSetNull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Annee", b =>
                {
                    b.Property<Guid>("AnneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("AnneeId");

                    b.ToTable("Annee");

                    b.HasData(
                        new
                        {
                            AnneeId = new Guid("6be03856-f9c4-4534-86d3-22475e554c85"),
                            Number = 2010
                        },
                        new
                        {
                            AnneeId = new Guid("1a312469-ca73-4c72-970a-ed00081634b4"),
                            Number = 2011
                        },
                        new
                        {
                            AnneeId = new Guid("d6a0eca7-603e-495a-ac10-d1c9c2e2e130"),
                            Number = 2012
                        },
                        new
                        {
                            AnneeId = new Guid("a47db76a-37f3-4f9b-8191-a958161c2975"),
                            Number = 2013
                        },
                        new
                        {
                            AnneeId = new Guid("3f06f824-f3cf-4298-8da8-bea58bc6322a"),
                            Number = 2014
                        },
                        new
                        {
                            AnneeId = new Guid("3bd076f5-ad0a-43ac-95cf-ffd6c2c9bb2e"),
                            Number = 2015
                        },
                        new
                        {
                            AnneeId = new Guid("ba116877-ec84-4cb6-9d03-e51da6328522"),
                            Number = 2016
                        },
                        new
                        {
                            AnneeId = new Guid("2d2333ed-3175-4de5-8f3a-3ed346e7c2e4"),
                            Number = 2017
                        },
                        new
                        {
                            AnneeId = new Guid("c0f29beb-14d2-4271-97f9-637aa5032587"),
                            Number = 2018
                        },
                        new
                        {
                            AnneeId = new Guid("e4ba0631-1ebc-4146-abab-966bebb7dbc6"),
                            Number = 2019
                        },
                        new
                        {
                            AnneeId = new Guid("76a90406-f789-4c48-8085-e0f2b1c848aa"),
                            Number = 2020
                        },
                        new
                        {
                            AnneeId = new Guid("190a8821-5afa-4d1b-800e-87d50ad049a0"),
                            Number = 2021
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CepageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CepageId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9955b349-69e1-4bc1-8e12-f9c2c42715b1"),
                            AnneeId = new Guid("6be03856-f9c4-4534-86d3-22475e554c85"),
                            CapacityId = new Guid("6a1140bc-232d-4b79-9f35-9fc86756e5fd"),
                            CepageId = new Guid("3a8c1ec5-2a13-4ad1-9a7f-949c0b34d04f"),
                            Description = "Description à venir",
                            FamilyId = new Guid("2935a39f-ad93-4da1-b51d-c591343e0aa6"),
                            Name = "Bouteille de vin",
                            Ref = "152DER147DFM9",
                            SupplierId = new Guid("2c3d4e8b-46b7-44ae-a2b5-e1c19bf33f02"),
                            UnitPrice = 5.5999999999999996
                        },
                        new
                        {
                            Id = new Guid("29ef26fa-f385-40b8-aa77-6858dda5eb8d"),
                            AnneeId = new Guid("190a8821-5afa-4d1b-800e-87d50ad049a0"),
                            CapacityId = new Guid("fa5ec0b1-ff64-4055-93d9-09934fe68050"),
                            CepageId = new Guid("d08b1746-ec42-4299-a131-d4cb77e139bc"),
                            Description = "Description à venir",
                            FamilyId = new Guid("dfdd68d5-613e-487e-a870-e49a440b869e"),
                            Name = "Bouteille de bordeau",
                            Ref = "452SER197DRP9",
                            SupplierId = new Guid("2c3d4e8b-46b7-44ae-a2b5-e1c19bf33f02"),
                            UnitPrice = 3.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Capacity", b =>
                {
                    b.Property<Guid>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BottleCapacity")
                        .HasColumnType("float");

                    b.HasKey("CapacityId");

                    b.ToTable("Capacity");

                    b.HasData(
                        new
                        {
                            CapacityId = new Guid("6a1140bc-232d-4b79-9f35-9fc86756e5fd"),
                            BottleCapacity = 75.0
                        },
                        new
                        {
                            CapacityId = new Guid("fa5ec0b1-ff64-4055-93d9-09934fe68050"),
                            BottleCapacity = 37.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Cepage", b =>
                {
                    b.Property<Guid>("CepageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CepageId");

                    b.ToTable("Cepage");

                    b.HasData(
                        new
                        {
                            CepageId = new Guid("3a8c1ec5-2a13-4ad1-9a7f-949c0b34d04f"),
                            Name = "Chardonnay",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("ff304109-18c8-4595-856f-5d2318daa77b"),
                            Name = "Sauvignon",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("79695e24-83fa-43f5-8741-6b76bd244349"),
                            Name = "Pinot Noir",
                            Origin = "Allemagne"
                        },
                        new
                        {
                            CepageId = new Guid("2d112c5e-cf26-4f3e-bf3d-07dc4b767062"),
                            Name = "Riesling",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("e71ec35a-710d-4522-90a2-23000d66f912"),
                            Name = "Gewurztraminer",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("6c9d2be6-2384-4f15-b1f5-49f14351b58b"),
                            Name = "Merlot noir",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("d08b1746-ec42-4299-a131-d4cb77e139bc"),
                            Name = "Mauzac rosé",
                            Origin = "France"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");

                    b.HasData(
                        new
                        {
                            FamilyId = new Guid("2935a39f-ad93-4da1-b51d-c591343e0aa6"),
                            Name = "Rosé"
                        },
                        new
                        {
                            FamilyId = new Guid("1aa5b5ce-56c7-45e1-a56d-265a8e7b6c9c"),
                            Name = "Vin blanc"
                        },
                        new
                        {
                            FamilyId = new Guid("b1f5a4d6-9764-4c5f-b25b-6cf4c7dc7d9b"),
                            Name = "Vin rouge"
                        },
                        new
                        {
                            FamilyId = new Guid("1b53644a-ead1-456d-9cf7-de41bff335e6"),
                            Name = "Muscat"
                        },
                        new
                        {
                            FamilyId = new Guid("9433da18-8302-470f-a2d9-4cf66b5c55c9"),
                            Name = "Vin cuit"
                        },
                        new
                        {
                            FamilyId = new Guid("dfdd68d5-613e-487e-a870-e49a440b869e"),
                            Name = "Mousseux"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Provision")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.Property<Guid>("ArticleRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleRowId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClientOrderId");

                    b.ToTable("ArticleRow");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.Property<Guid>("ClientOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("ClientOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClientOrder");

                    b.HasData(
                        new
                        {
                            ClientOrderId = new Guid("c6bdb5d8-033e-402d-ba03-22c4c1ce269a"),
                            CustomerId = new Guid("5367f7e7-78f3-47be-83cd-e660a2bed3e3"),
                            Date = new DateTime(2022, 1, 3, 9, 56, 16, 563, DateTimeKind.Utc).AddTicks(3611),
                            HTPrice = 0.0,
                            Reference = "TEST123456",
                            StatusId = new Guid("cd08ae98-4963-4e7c-a689-b1d67f39323b"),
                            TTCPrice = 0.0
                        },
                        new
                        {
                            ClientOrderId = new Guid("7aa3d14d-89a0-414e-8fa9-9d7547be52b6"),
                            CustomerId = new Guid("bf41aa26-965b-4219-9505-31c1f8e5a0ea"),
                            Date = new DateTime(2022, 1, 3, 9, 56, 16, 563, DateTimeKind.Utc).AddTicks(4087),
                            HTPrice = 0.0,
                            Reference = "TEST234567",
                            StatusId = new Guid("cd08ae98-4963-4e7c-a689-b1d67f39323b"),
                            TTCPrice = 0.0
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurshaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("PurshaseOrderId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = new Guid("cd08ae98-4963-4e7c-a689-b1d67f39323b"),
                            Name = "Vérification en cours"
                        },
                        new
                        {
                            StatusId = new Guid("98400fab-9298-4152-b32d-241e4adb8f7e"),
                            Name = "Terminée"
                        },
                        new
                        {
                            StatusId = new Guid("3478bc93-3590-4908-b5be-4eb47aff5c7f"),
                            Name = "Archivée"
                        },
                        new
                        {
                            StatusId = new Guid("d463f193-fd35-4be2-8d0c-cac920b0e6ec"),
                            Name = "Livrée"
                        },
                        new
                        {
                            StatusId = new Guid("36995554-68ac-4055-aa74-9697e3937409"),
                            Name = "En cours d'approvisionnement"
                        },
                        new
                        {
                            StatusId = new Guid("fa6760b9-97be-4e4f-bfa1-16ee3e6a9036"),
                            Name = "En cours de traitement"
                        },
                        new
                        {
                            StatusId = new Guid("13803abd-52ad-4f39-9b0f-9f7ad844261e"),
                            Name = "En préparation"
                        },
                        new
                        {
                            StatusId = new Guid("0ae7e177-4df0-4404-8e98-2ba7e3f87338"),
                            Name = "En cours d'acheminement"
                        },
                        new
                        {
                            StatusId = new Guid("13dc14a7-51be-4d27-b52c-6068915d6042"),
                            Name = "j'ai volé votre bouteille, merci, bisous, de Greg."
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("2c3d4e8b-46b7-44ae-a2b5-e1c19bf33f02"),
                            Adress = "14 Rue Louis Ruquier",
                            City = "Sotteville-lès-Rouen",
                            Cp = "76300",
                            Name = "La Centrale des Vins",
                            PhoneNumber = "02 35 73 03 93",
                            Siret = "38862771300067"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5367f7e7-78f3-47be-83cd-e660a2bed3e3"),
                            Adress = "1 chemin des alisiers 67700 Saverne",
                            City = "Saverne",
                            Cp = "67700",
                            CustomerReference = "FFRIE3A72FLJ",
                            Email = "luciole.trp@gmail.com",
                            FirstName = "Lucile",
                            LastName = "TRIPIER",
                            Password = "123",
                            PhoneNumber = "0699318613"
                        },
                        new
                        {
                            Id = new Guid("bf41aa26-965b-4219-9505-31c1f8e5a0ea"),
                            Adress = "123 rue des chats",
                            City = "CroquetteLand",
                            Cp = "000009",
                            CustomerReference = "7BTWBBNCXCLX",
                            Email = "gregory.lbl@gmail.com",
                            FirstName = "Gregory",
                            LastName = "LEBLOND",
                            Password = "123",
                            PhoneNumber = "0631258641"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c12d81d-dc5d-4c07-9613-afb5231ad6d1"),
                            Adress = "3 Grande rue",
                            City = "Rouen",
                            Cp = "76000",
                            Email = "mariam.el@gmail.com",
                            EmployeNumber = "F3OFC2OPBR",
                            FirstName = "Mariam",
                            LastName = "EL-ALLALI",
                            Password = "123",
                            PhoneNumber = "0698574123"
                        },
                        new
                        {
                            Id = new Guid("26f67a74-e43b-44d1-b982-6f7013ba8144"),
                            Adress = "57 Boulevard Gambetta",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francois.dupont@yahoo.com",
                            EmployeNumber = "GIZVZ0NC0R",
                            FirstName = "François",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0635241896"
                        },
                        new
                        {
                            Id = new Guid("319ec578-2856-46e7-ba0e-c67d268cc2ea"),
                            Adress = "21 Rue Victor Hugo",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francine.dupont@gmail.com",
                            EmployeNumber = "BRPQA4IBNN",
                            FirstName = "Francine",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0632547896"
                        },
                        new
                        {
                            Id = new Guid("aa63a796-0a70-406a-8882-f1748cffd1ef"),
                            Adress = "3 Rue du Bout au Roussel",
                            City = "Champenard",
                            Cp = "27600",
                            Email = "jeremy.petit@outlook.com",
                            EmployeNumber = "6UT1JJQQDL",
                            FirstName = "Jeremy",
                            LastName = "PETIT",
                            Password = "123",
                            PhoneNumber = "0652341254"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Annee", "Annee")
                        .WithMany()
                        .HasForeignKey("AnneeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("STIVE_API.Data.Models.Articles.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Cepage", "Cepage")
                        .WithMany()
                        .HasForeignKey("CepageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STIVE_API.Data.Models.Articles.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Annee");

                    b.Navigation("Capacity");

                    b.Navigation("Cepage");

                    b.Navigation("Family");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.ClientOrder", "ClientOrder")
                        .WithMany()
                        .HasForeignKey("ClientOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ClientOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Article");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
