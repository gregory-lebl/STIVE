// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STIVE_API.Data;

namespace STIVE_API.Migrations
{
    [DbContext(typeof(StiveDbContext))]
    [Migration("20211217135201_createDB2")]
    partial class createDB2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Annee", b =>
                {
                    b.Property<Guid>("AnneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("AnneeId");

                    b.ToTable("Annee");

                    b.HasData(
                        new
                        {
                            AnneeId = new Guid("271bdaed-2e13-4227-b59e-edc2e24121be"),
                            Number = 2010
                        },
                        new
                        {
                            AnneeId = new Guid("5bff7bac-b669-44d2-a02b-cdacc247cf72"),
                            Number = 2011
                        },
                        new
                        {
                            AnneeId = new Guid("2a69cdff-6a4a-469d-a976-dec57a6da12f"),
                            Number = 2012
                        },
                        new
                        {
                            AnneeId = new Guid("7159868b-2231-435a-901f-9f0c4bbbf795"),
                            Number = 2013
                        },
                        new
                        {
                            AnneeId = new Guid("a101f38b-763e-49a5-ab02-cb1ff8e20f31"),
                            Number = 2014
                        },
                        new
                        {
                            AnneeId = new Guid("49654645-c7dd-4dbf-90fb-ed2252ca4a3b"),
                            Number = 2015
                        },
                        new
                        {
                            AnneeId = new Guid("e5da836f-33d7-4d0d-814b-12a6acb66f91"),
                            Number = 2016
                        },
                        new
                        {
                            AnneeId = new Guid("9b35357a-d743-4ed5-baf9-227718d7fd2c"),
                            Number = 2017
                        },
                        new
                        {
                            AnneeId = new Guid("17c12c12-d6a2-4021-bdae-abeed821fde1"),
                            Number = 2018
                        },
                        new
                        {
                            AnneeId = new Guid("26d8c7db-4db3-4e22-8826-d8a0e639b8f0"),
                            Number = 2019
                        },
                        new
                        {
                            AnneeId = new Guid("5c281f79-f82e-4221-baa0-f862bd2feafe"),
                            Number = 2020
                        },
                        new
                        {
                            AnneeId = new Guid("a3b0988a-eb4d-4316-b9b9-0fb786dbe060"),
                            Number = 2021
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CepageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CepageId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a65a5cd-adab-4d7a-91a5-4eb4b4684ff1"),
                            AnneeId = new Guid("271bdaed-2e13-4227-b59e-edc2e24121be"),
                            CapacityId = new Guid("7b5b650c-809b-460e-a64f-b9e8f3386fc3"),
                            CepageId = new Guid("992b704d-ba28-4451-a1be-794b8fc3fd1b"),
                            Description = "Description à venir",
                            FamilyId = new Guid("58093a9a-47ae-4ce6-9c6c-1cf4455377df"),
                            Name = "Bouteille de vin",
                            Ref = "152DER147DFM9",
                            SupplierId = new Guid("bc222923-04ee-44da-8412-5e9a666fb969"),
                            UnitPrice = 5.5999999999999996
                        },
                        new
                        {
                            Id = new Guid("c0a5d5e0-185b-42e6-9551-d66a15fcf42b"),
                            AnneeId = new Guid("a3b0988a-eb4d-4316-b9b9-0fb786dbe060"),
                            CapacityId = new Guid("0c907ea5-d1ec-4f3d-9bcc-75f6009191fe"),
                            CepageId = new Guid("1914778c-d734-41b2-a900-681cea892b7e"),
                            Description = "Description à venir",
                            FamilyId = new Guid("2cb1ef22-1ef4-4457-a015-bce70279956a"),
                            Name = "Bouteille de bordeau",
                            Ref = "452SER197DRP9",
                            SupplierId = new Guid("bc222923-04ee-44da-8412-5e9a666fb969"),
                            UnitPrice = 3.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Capacity", b =>
                {
                    b.Property<Guid>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BottleCapacity")
                        .HasColumnType("float");

                    b.HasKey("CapacityId");

                    b.ToTable("Capacity");

                    b.HasData(
                        new
                        {
                            CapacityId = new Guid("7b5b650c-809b-460e-a64f-b9e8f3386fc3"),
                            BottleCapacity = 75.0
                        },
                        new
                        {
                            CapacityId = new Guid("0c907ea5-d1ec-4f3d-9bcc-75f6009191fe"),
                            BottleCapacity = 37.5
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Cepage", b =>
                {
                    b.Property<Guid>("CepageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CepageId");

                    b.ToTable("Cepage");

                    b.HasData(
                        new
                        {
                            CepageId = new Guid("992b704d-ba28-4451-a1be-794b8fc3fd1b"),
                            Name = "Chardonnay",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("e61df157-b336-4584-83fe-d9c4a6e966cb"),
                            Name = "Sauvignon",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("24f9f0ff-b196-47bc-beef-c63e8002d883"),
                            Name = "Pinot Noir",
                            Origin = "Allemagne"
                        },
                        new
                        {
                            CepageId = new Guid("46f4004b-81e1-4272-a207-938fe9a180f0"),
                            Name = "Riesling",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("c532455e-aa24-46a8-b157-d5b444697128"),
                            Name = "Gewurztraminer",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("f59787fa-1a92-4664-a890-2e5b56a70883"),
                            Name = "Merlot noir",
                            Origin = "France"
                        },
                        new
                        {
                            CepageId = new Guid("1914778c-d734-41b2-a900-681cea892b7e"),
                            Name = "Mauzac rosé",
                            Origin = "France"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");

                    b.HasData(
                        new
                        {
                            FamilyId = new Guid("58093a9a-47ae-4ce6-9c6c-1cf4455377df"),
                            Name = "Rosé"
                        },
                        new
                        {
                            FamilyId = new Guid("b1b46d3c-a127-4553-a53e-f0085a57c92e"),
                            Name = "Vin blanc"
                        },
                        new
                        {
                            FamilyId = new Guid("015de04e-caaf-46c4-a2a1-16031f59e20f"),
                            Name = "Vin rouge"
                        },
                        new
                        {
                            FamilyId = new Guid("dd08f3d3-1869-4276-abff-6ba4f103b2db"),
                            Name = "Muscat"
                        },
                        new
                        {
                            FamilyId = new Guid("d88a7a2b-0f5f-4722-98fa-340ef8d961ee"),
                            Name = "Vin cuit"
                        },
                        new
                        {
                            FamilyId = new Guid("2cb1ef22-1ef4-4457-a015-bce70279956a"),
                            Name = "Mousseux"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Provision")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.Property<Guid>("ArticleRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleRowId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClientOrderId");

                    b.ToTable("ArticleRow");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.Property<Guid>("ClientOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("ClientOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClientOrder");

                    b.HasData(
                        new
                        {
                            ClientOrderId = new Guid("bf9dc1bb-5234-4d46-b819-f143c7dcafc5"),
                            CustomerId = new Guid("27b5d3bf-5c64-4253-8242-f4f1d7c236c9"),
                            Date = new DateTime(2021, 12, 17, 13, 52, 1, 63, DateTimeKind.Utc).AddTicks(6300),
                            HTPrice = 0.0,
                            Reference = "TEST123456",
                            StatusId = new Guid("0f2b36da-c749-4510-9629-935c124eda57"),
                            TTCPrice = 0.0
                        },
                        new
                        {
                            ClientOrderId = new Guid("28e468db-562a-4ee5-8e5c-ff9c373e67f6"),
                            CustomerId = new Guid("72a733d9-f16f-4374-888c-75a0134aca2a"),
                            Date = new DateTime(2021, 12, 17, 13, 52, 1, 63, DateTimeKind.Utc).AddTicks(7025),
                            HTPrice = 0.0,
                            Reference = "TEST234567",
                            StatusId = new Guid("0f2b36da-c749-4510-9629-935c124eda57"),
                            TTCPrice = 0.0
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurshaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HTPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TTCPrice")
                        .HasColumnType("float");

                    b.HasKey("PurshaseOrderId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = new Guid("0f2b36da-c749-4510-9629-935c124eda57"),
                            Name = "Vérification en cours"
                        },
                        new
                        {
                            StatusId = new Guid("563d25ef-972d-40d9-9caa-6c006c98193e"),
                            Name = "Terminée"
                        },
                        new
                        {
                            StatusId = new Guid("2b8f3a48-5f2f-4ed7-808a-6307aa2f9d64"),
                            Name = "Archivée"
                        },
                        new
                        {
                            StatusId = new Guid("5131969c-1526-4fd6-8f28-8beb015a0d1c"),
                            Name = "Livrée"
                        },
                        new
                        {
                            StatusId = new Guid("38cb352c-fba1-4701-aab8-a0094a82bec7"),
                            Name = "En cours d'approvisionnement"
                        },
                        new
                        {
                            StatusId = new Guid("d07033b0-174f-4363-aa06-0afb591d00e4"),
                            Name = "En cours de traitement"
                        },
                        new
                        {
                            StatusId = new Guid("9adb66a1-3773-44a3-8130-03461d69e03f"),
                            Name = "En préparation"
                        },
                        new
                        {
                            StatusId = new Guid("09bee351-723e-4a53-951a-223518824869"),
                            Name = "En cours d'acheminement"
                        },
                        new
                        {
                            StatusId = new Guid("ebeba30a-202e-4491-95e5-6a8776289bfe"),
                            Name = "j'ai volé votre bouteille, merci, bisous, de Greg."
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("bc222923-04ee-44da-8412-5e9a666fb969"),
                            Adress = "14 Rue Louis Ruquier",
                            City = "Sotteville-lès-Rouen",
                            Cp = "76300",
                            Name = "La Centrale des Vins",
                            PhoneNumber = "02 35 73 03 93",
                            Siret = "38862771300067"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27b5d3bf-5c64-4253-8242-f4f1d7c236c9"),
                            Adress = "1 chemin des alisiers 67700 Saverne",
                            City = "Saverne",
                            Cp = "67700",
                            CustomerReference = "8KRIN4LK11K2",
                            Email = "luciole.trp@gmail.com",
                            FirstName = "Lucile",
                            LastName = "TRIPIER",
                            Password = "123",
                            PhoneNumber = "0699318613"
                        },
                        new
                        {
                            Id = new Guid("72a733d9-f16f-4374-888c-75a0134aca2a"),
                            Adress = "123 rue des chats",
                            City = "CroquetteLand",
                            Cp = "000009",
                            CustomerReference = "DKUE5ZMV2EHW",
                            Email = "gregory.lbl@gmail.com",
                            FirstName = "Gregory",
                            LastName = "LEBLOND",
                            Password = "123",
                            PhoneNumber = "0631258641"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82d73d70-7ca8-4003-81cd-86cbf1ae953e"),
                            Adress = "3 Grande rue",
                            City = "Rouen",
                            Cp = "76000",
                            Email = "mariam.el@gmail.com",
                            EmployeNumber = "ADJIVLQ6QL",
                            FirstName = "Mariam",
                            LastName = "EL-ALLALI",
                            Password = "123",
                            PhoneNumber = "0698574123"
                        },
                        new
                        {
                            Id = new Guid("ddb535af-defb-4057-9cb4-2aa075035451"),
                            Adress = "57 Boulevard Gambetta",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francois.dupont@yahoo.com",
                            EmployeNumber = "G0CEOTOWFB",
                            FirstName = "François",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0635241896"
                        },
                        new
                        {
                            Id = new Guid("45d6be72-c326-4132-8c85-4c0121d64351"),
                            Adress = "21 Rue Victor Hugo",
                            City = "Evreux",
                            Cp = "27000",
                            Email = "francine.dupont@gmail.com",
                            EmployeNumber = "KKYFRFLAP2",
                            FirstName = "Francine",
                            LastName = "DUPONT",
                            Password = "123",
                            PhoneNumber = "0632547896"
                        },
                        new
                        {
                            Id = new Guid("653af4c6-4bea-4e55-904d-1d90a008722c"),
                            Adress = "3 Rue du Bout au Roussel",
                            City = "Champenard",
                            Cp = "27600",
                            Email = "jeremy.petit@outlook.com",
                            EmployeNumber = "93Z9R94F6M",
                            FirstName = "Jeremy",
                            LastName = "PETIT",
                            Password = "123",
                            PhoneNumber = "0652341254"
                        });
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Article", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Annee", "Annee")
                        .WithMany()
                        .HasForeignKey("AnneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Articles.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Articles.Cepage", "Cepage")
                        .WithMany()
                        .HasForeignKey("CepageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Articles.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Annee");

                    b.Navigation("Capacity");

                    b.Navigation("Cepage");

                    b.Navigation("Family");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Articles.Stock", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ArticleRow", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.ClientOrder", "ClientOrder")
                        .WithMany()
                        .HasForeignKey("ClientOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ClientOrder");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.ClientOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STIVE_API.Data.Models.Orders.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STIVE_API.Data.Models.Orders.PurchaseOrder", b =>
                {
                    b.HasOne("STIVE_API.Data.Models.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("STIVE_API.Data.Models.Orders.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Article");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
